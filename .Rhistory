#初始化随机数发生器
TelephoneData<-read.csv(file.choose())
TelephoneData[,"Churn"] <- as.factor(TelephoneData[,"Churn"]) # 读取数据集
set.seed(1234)
#选择了大约70%的数据用于训练，30%用于测试
index = sample(2, nrow(TelephoneData), replace =
TRUE, prob = c(0.7,0.3))
#将数据集分为训练集和测试集
TrainData = TelephoneData[index == 1, ]
TestData = TelephoneData[index == 2,]
# RPART包中的rpart()函数构建决策树模型
library(rpart)
rpart.model = rpart(Churn~., data = TrainData, method =
"class",parms = list(split="information"))
par(mfrow=c(1,1))
library(rpart.plot) #--- If the packages rattle is installed,
install.packages('rpart.plot')
library(rpart.plot) #--- If the packages rattle is installed,
it has rpart.plot in it
rpart.plot(rpart.model，type=1)
rpart.plot(rpart.model,type=1)
rpart.model = rpart(Churn~., data = TrainData, method = "class", parms = list(split="information"))
rpart.plot(rpart.model,type=1)
#初始化随机数发生器
TelephoneData<-read.csv(file.choose())
TelephoneData[,"Churn"] <- as.factor(TelephoneData[,"Churn"]) # 读取数据集
set.seed(1234)
#选择了大约70%的数据用于训练，30%用于测试
index = sample(2, nrow(TelephoneData), replace = TRUE, prob = c(0.7,0.3))
#将数据集分为训练集和测试集
TrainData = TelephoneData[index == 1, ]
TestData = TelephoneData[index == 2,]
# RPART包中的rpart()函数构建决策树模型
library(rpart)
rpart.model = rpart(Churn~., data = TrainData, method = "class", parms = list(split="information"))
par(mfrow=c(1,1))
library(rpart.plot) #--- If the packages rattle is installed,
rpart.plot(rpart.model,type=1)
# RPART包中的rpart()函数构建决策树模型
library(rpart)
rpart.model = rpart(Churn~., data = TrainData, method = "class", parms = list(split="information"))
par(mfrow=c(1,1))
library(rpart.plot) #--- If the packages rattle is installed,
rpart.plot(rpart.model,type=1)
rpart.plot(rpart.model,type=1)
rpart.model2 = rpart(流失~., data =
TrainData,method = "class",parms =
list(split="gini")) #CART模型
rpart.model2 = rpart(Churn~., data =
TrainData,method = "class",parms =
list(split="gini")) #CART模型
#install.packages("rpart.plot")
par(oma=c(0,0,1,0))
par(mfrow=c(1,1))
library(rpart.plot) #--- If the packages rattle
rpart.plot(rpart.model2,type=0,cex =1)
rpart.plot(rpart.model2,type=1,cex =1)
rpart.plot(rpart.model2,type=2,cex =1)
#初始化随机数发生器
TelephoneData<-read.csv(file.choose())
par(mfrow=c(3,3))
library(rpart.plot) #--- If the packages rattle is installed,
rpart.plot(rpart.model,type=1)
par(mfrow=c(1, 1))
library(rpart.plot) #--- If the packages rattle is installed,
rpart.plot(rpart.model,type=1)
rpart.plot(rpart.model,type=2)
rpart.plot(rpart.model,type=1)
rpart.model = rpart(Churn~gender+SeniorCitizen+Partner+tenure+PhoneService+InternetService, data = TrainData, method = "class", parms = list(split="information"))
par(mfrow=c(1, 1))
library(rpart.plot) #--- If the packages rattle is installed,
rpart.plot(rpart.model,type=1)
rpart.model = rpart(Churn~
gender+
SeniorCitizen+
Partner+
tenure+
PhoneService+
InternetService+
TechSupport, data = TrainData, method = "class", parms = list(split="information"))
par(mfrow=c(1, 1))
library(rpart.plot) #--- If the packages rattle is installed,
rpart.plot(rpart.model,type=1)
getwd()
cd CodeGit
CodeGit
last_word_df <- read.csv(file.choose())
setwd('CodeProject')
getwd()
setwd('Capital-Punishment-Research')
getwd()
# 随机抽取 80 行
set.seed(123)  # 设置随机种子以确保结果可重复
sampled_rows <- last_word_df[sample(nrow(last_word_df), 80), ]
# 将抽取的 80 行分成 4 份
split_data <- split(sampled_rows, rep(1:4, each = 20))
# 保存每份数据
for (i in 1:4) {
write.csv(split_data[[i]], paste0("data/part_", i, ".csv"), row.names = FALSE)
}
View(sampled_rows)
View(last_word_df)
sampled_rows.to_csv('last_words_sampled_rows.csv', index=False)
write.csv(sampled_rows, 'last_words_sampled_rows.csv', index=False)
write.csv(sampled_rows, 'last_words_sampled_rows.csv', index=FALSE)
write.csv(sampled_rows, 'last_words_sampled_rows.csv')
write.csv(sampled_rows, 'data/last_words_sampled_rows.csv')
